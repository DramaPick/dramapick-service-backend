name: Deploy FastAPI to EC2

on:
  push:
    branches:
      - master  # master 브랜치에 코드가 푸시될 때 실행

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
    # 1️⃣ 최신 코드 가져오기
    - name: Checkout code
      uses: actions/checkout@v3

    - name: List files for debugging
      run: ls -al

    # 2️⃣ Docker 이미지 빌드 및 Docker Hub에 푸시
    - name: Build and Push Docker Image
      run: |
        docker build -t fastapi-app .
        echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin
        docker tag fastapi-app ${{ secrets.DOCKER_USERNAME }}/fastapi-app:latest
        docker push ${{ secrets.DOCKER_USERNAME }}/fastapi-app:latest

    # 3️⃣ EC2에 필요한 파일 업로드
    - name: Upload docker-compose.yml to EC2
      uses: appleboy/scp-action@master
      with:
        host: ${{ secrets.EC2_HOST }}
        username: ${{ secrets.EC2_USER }}
        key: ${{ secrets.EC2_SSH_KEY }}
        source: "./docker-compose.yml"
        target: "/home/ec2-user/app/"
    
    # 업로드
    - name: Upload Dockerfile to EC2
      uses: appleboy/scp-action@master
      with:
        host: ${{ secrets.EC2_HOST }}
        username: ${{ secrets.EC2_USER }}
        key: ${{ secrets.EC2_SSH_KEY }}
        source: "./Dockerfile"
        target: "/home/ec2-user/app/"

    # 3️⃣-1 EC2 환경 변수 확인 및 디렉토리 체크
    - name: Test SSH Connection & Check Environment
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.EC2_HOST }}
        username: ${{ secrets.EC2_USER }}
        key: ${{ secrets.EC2_SSH_KEY }}
        script: |
          echo "✅ SSH 연결 성공!"
          
          # 🔍 EC2 환경 변수 확인
          echo "🔹 EC2_USER: $(whoami)"
          echo "🔹 EC2_HOST: $(hostname -I)"

          if [ ! -d "/home/ec2-user/app" ]; then
            echo "📂 /home/ec2-user/app 디렉터리가 없습니다. 생성합니다."
            mkdir -p /home/ec2-user/app
          fi
          ls -al /home/ec2-user/app  # 디렉터리 내용 확인

    # 4️⃣ EC2에 SSH 접속 후 최신 Docker 이미지 배포
    - name: Deploy to EC2
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.EC2_HOST }}
        username: ${{ secrets.EC2_USER }}
        key: ${{ secrets.EC2_SSH_KEY }}
        command_timeout: 500s
        script: |
          # 디스크 공간 확보
          docker system prune -a -f
          
          # 프로젝트 디렉토리로 이동
          cd /home/ec2-user/app

          # 최신 Docker 이미지 가져오기
          docker pull ${{ secrets.DOCKER_USERNAME }}/fastapi-app:latest
          
          # 필수 파일 존재 여부 확인
          for file in docker-compose.yml Dockerfile; do
            if [ ! -f "$file" ]; then
              echo "⚠️ $file 파일이 존재하지 않습니다!"
              exit 1
            fi
          done
          
          # 기존 컨테이너 중지 및 삭제
          docker-compose down || true
          
          # .env 파일 생성 (GitHub Secrets에서 가져오기)
          cat <<EOF > .env
          AWS_ACCESS_KEY=${{ secrets.AWS_ACCESS_KEY }}
          AWS_SECRET_KEY=${{ secrets.AWS_SECRET_KEY }}
          S3_BUCKET_NAME=${{ secrets.S3_BUCKET_NAME }}
          S3_REGION_NAME=${{ secrets.S3_REGION_NAME }}
          GPT_API_KEY=${{ secrets.GPT_API_KEY }}
          REDIS_HOST=redis
          REDIS_PORT=6379
          EOF
          
          # docker-compose 실행 권한 부여
          chmod +x docker-compose.yml
          
          # Docker Compose 실행
          docker-compose --env-file .env up -d